import asyncio
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiocron import crontab
import os

TOKEN = os.getenv("TOKEN")
CHANNEL_USERNAME = "@poryadindom"
admin_id_str = os.getenv("ADMIN_ID")
if not admin_id_str:
    raise ValueError("ADMIN_ID environment variable is not set")
ADMIN_ID = int(admin_id_str)

PDF_FILE_PATH = "file.pdf"
USERS_FILE = "users.json"

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

try:
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        users = json.load(f)
except (FileNotFoundError, json.JSONDecodeError):
    users = {}

async def save_users():
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=2, ensure_ascii=False)

@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = str(message.from_user.id)
    users[user_id] = users.get(user_id, {"name": message.from_user.full_name})
    await save_users()

    member = await bot.get_chat_member(CHANNEL_USERNAME, message.from_user.id)
    if member.status not in ("member", "administrator", "creator"):
        kb = InlineKeyboardBuilder()
        kb.button(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.", reply_markup=kb.as_markup())
        return

    await ask_goal(message)

async def ask_goal(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–ª—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", callback_data="goal_live")
    kb.button(text="–î–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", callback_data="goal_invest")
    await message.answer("–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥–ª—è –∂–∏–∑–Ω–∏ –∏–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏?", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("goal_"))
async def handle_goal(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    goal = callback.data.replace("goal_", "")
    users[user_id]["goal"] = goal
    await save_users()

    kb = InlineKeyboardBuilder()
    kb.button(text="1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", callback_data="type_1")
    kb.button(text="2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", callback_data="type_2")
    kb.button(text="3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", callback_data="type_3")
    kb.button(text="–î–æ–º", callback_data="type_house")
    kb.button(text="–°—Ç—É–¥–∏—è", callback_data="type_studio")
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=kb.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("type_"))
async def handle_type(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    type_ = callback.data.replace("type_", "")
    users[user_id]["type"] = type_
    await save_users()

    if users[user_id].get("goal") == "invest":
        kb = InlineKeyboardBuilder()
        kb.button(text="–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", callback_data="city_krasnodar")
        kb.button(text="–ú–æ—Å–∫–≤–∞", callback_data="city_moscow")
        kb.button(text="–°–ü–ë", callback_data="city_spb")
        kb.button(text="–ü–æ–±–µ—Ä–µ–∂—å–µ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è", callback_data="city_coast")
        await callback.message.answer("–ö–∞–∫–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –≤–∞–º –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π?", reply_markup=kb.as_markup())
    else:
        await request_contact(callback.message)

    await callback.answer()

@dp.callback_query(F.data.startswith("city_"))
async def handle_city(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    city = callback.data.replace("city_", "")
    users[user_id]["city"] = city
    await save_users()
    await request_contact(callback.message)
    await callback.answer()

async def request_contact(message: Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=kb)

@dp.message(F.contact)
async def handle_contact(message: Message):
    user_id = str(message.from_user.id)
    contact = message.contact.phone_number
    users[user_id]["phone"] = contact
    await save_users()

    name = message.from_user.full_name
    goal = users[user_id].get("goal", "‚Äî")
    type_ = users[user_id].get("type", "‚Äî")
    city = users[user_id].get("city", "‚Äî")

    msg = f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç <b>{name}</b>\n–¶–µ–ª—å: {goal}\n–¢–∏–ø: {type_}\n–†–µ–≥–∏–æ–Ω: {city}\n–¢–µ–ª–µ—Ñ–æ–Ω: {contact}"
    await bot.send_message(ADMIN_ID, msg)

    if os.path.exists(PDF_FILE_PATH):
        file = FSInputFile(PDF_FILE_PATH)
        await message.answer_document(file, caption="–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –ø–æ–¥–±–æ—Ä–∫–∞ –¥–ª—è –≤–∞—Å. –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏! üòä")
    else:
        await message.answer("–§–∞–π–ª –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω, –Ω–æ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ª–∏—á–Ω–æ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ! üîî")

    await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å! –ú—ã –ø–æ–¥–±–µ—Ä—ë–º –¥–ª—è –≤–∞—Å –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. üëå", reply_markup=types.ReplyKeyboardRemove())

@dp.message()
async def smart_replies(message: Message):
    text = message.text.lower()
    if "–º–æ—Ä–µ" in text or "–ø–æ–±–µ—Ä–µ–∂—å–µ" in text:
        await message.answer("üèñ –£ –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ –ø–æ–±–µ—Ä–µ–∂—å–µ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è! –ú–æ–≥—É –≤—ã—Å–ª–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω.")
    elif "—Ü–µ–Ω—ã" in text or "—Å—Ç–æ–∏–º–æ—Å—Ç—å" in text:
        await message.answer("üí∞ –¶–µ–Ω—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–∏–ø–∞ –∂–∏–ª—å—è –∏ —Ä–µ–≥–∏–æ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ, –∏ –º—ã –ø–æ–¥—Å–∫–∞–∂–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
    elif "–∫–æ–Ω—Ç–∞–∫—Ç" in text or "–ø–æ–∑–≤–æ–Ω–∏—Ç–µ" in text:
        await message.answer("üìû –ö–æ–Ω–µ—á–Ω–æ, –∫–∞–∫ —Å –≤–∞–º–∏ –ª—É—á—à–µ —Å–≤—è–∑–∞—Ç—å—Å—è? –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞.")
    else:
        await message.answer("üëÄ –ú—ã —Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º —á–∏—Ç–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")

@crontab("0 12 */2 * *")
async def scheduled_message():
    for user_id in users:
        try:
            await bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! üëã –£ –Ω–∞—Å –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å. –•–æ—Ç–∏—Ç–µ, –≤—ã—à–ª–µ–º –ø–æ–¥–±–æ—Ä–∫—É?")
        except:
            continue

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
